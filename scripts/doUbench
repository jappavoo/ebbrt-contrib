#!/bin/bash
set -x
# ENVIRONMENT VARIABLES THAT CAN BE USED
# TO OVERRIDE DEFAULT BEHAVIOR
# Monitor hardware test via xterm/screen/minicom
#EXP_MONITOR
# force skip of make step
#EXP_SKIPMAKE
RUNS=${EXP_RUNS:-1}
REPEAT=${EXP_REPEAT:-1}
DONRUNS=${EXP_DONRUNS:-4}
DONREPEAT=${EXP_DONREPEAT:-1000}
MAXPROCESSORS=${EXP_MAXPROCS:-4}

EXEC=apps/ubench/hosted/build/Release/ubench
DONEXPDIR=/home/don/kh/experiment/ubench
BOOTFILE=${DONEXPDIR}/boot
STARTFILE=${DONEXPDIR}/start
STOPFILE=${DONEXPDIR}/stop
DONEXPPTR=/home/don/kh/experiment/current
TS="$(date +%s)"
SESSION=myDONlock_$$_$TS
EXTRAFILES="apps/ubench/hosted/build/Release/bm"
LINUXNOUT=ubench-linux_native.out
LINUXVMOUT=ubench-linux_VM.out
EBBRTOUT=ubench-ebbrt.out
RUNDIR=/home/don/kh/runs/current/run
DONEFILE=DONE_$$_$TS
KH=/opt/khpy/kh 
VMKERNEL=vmkernel
VMINITRD=vminitrd
VMEXEC=/root/$(basename $EXEC)
VMIMGDIR=vmimgs
VMSRCKERNEL=/opt/ubench/vmimgs/vmlinuz-3.16.0-4-amd64
VMSRCINITRD=/opt/ubench/vmimgs/debirf-minimal_jessie_3.16.0-4-amd64.cgz  

# THE ACTUAL EXPERIMENT COMMANDS

LINUXNRUN='
export EBBRT_NODE_ALLOCATOR_DEFAULT_CPUS=$MAXPROCESSORS;
for ((i=0; i<$RUNS; i++)); do 
   $EXEC -R $REPEAT -c;
   $EXEC -R $REPEAT -e;
   for ((p=1; p<=$MAXPROCESSORS; p++)); do  
     $EXEC -P $p -R $REPEAT -A 1000 -t; 
     $EXEC -P $p -R $REPEAT -n;
     $EXEC -P $p -R $REPEAT -p;
     $EXEC -P $p -R $REPEAT -A 100 -s;
     $EXEC -m -- hoardthreadtest $p;
   done;
done > $LINUXNOUT'

# LINUXNRUN='
# export EBBRT_NODE_ALLOCATOR_DEFAULT_CPUS=$MAXPROCESSORS;
# for ((i=0; i<$RUNS; i++)); do 
#    for ((p=1; p<=$MAXPROCESSORS; p++)); do  
#      $EXEC -P $p -R $REPEAT -A 1000 -t; 
#      $EXEC -P $p -R $REPEAT -A 2000 -t; 
#      $EXEC -P $p -R $REPEAT -A 4000 -t; 
#      $EXEC -P $p -R $REPEAT -A 8000 -t; 
#      $EXEC -P $p -R $REPEAT -A 16000 -t; 
#      $EXEC -P $p -R $REPEAT -A 10000000 -t; 
#    done;
# done > $LINUXNOUT'

# LINUXVMRUN="
# export EBBRT_NODE_ALLOCATOR_DEFAULT_CPUS=\$MAXPROCESSORS;
# NETID=\$($KH network | sed -n \"1 p\");
# for ((i=0; i<\$RUNS; i++)); do 
#    $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -R \$REPEAT -c'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#    node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#    $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -R \$REPEAT -e'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#    node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#   for ((p=1; p<=\$MAXPROCESSORS; p++)); do  
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 1000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 2000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 4000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 8000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 16000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 10000000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -n'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -p'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 100 -s'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -m -- hoardthreadtest \$p'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#   done;
# done > \$LINUXVMOUT; $KH clean"

LINUXVMRUN="
export EBBRT_NODE_ALLOCATOR_DEFAULT_CPUS=\$MAXPROCESSORS;
NETID=\$($KH network | sed -n \"1 p\");
for ((i=0; i<\$RUNS; i++)); do 
   $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -R \$REPEAT -c'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
   node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
   $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -R \$REPEAT -e'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
   node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
  for ((p=1; p<=\$MAXPROCESSORS; p++)); do  
     $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 1000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
     node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
     $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -n'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
     node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
     $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -p'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
     node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
     $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 100 -s'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
     node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
     $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -m -- hoardthreadtest \$p'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
     node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
  done;
done > \$LINUXVMOUT; $KH clean"

# LINUXVMRUN="
# export EBBRT_NODE_ALLOCATOR_DEFAULT_CPUS=\$MAXPROCESSORS;
# NETID=\$($KH network | sed -n \"1 p\");
# for ((i=0; i<\$RUNS; i++)); do 
#   for ((p=1; p<=\$MAXPROCESSORS; p++)); do  
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 1000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 2000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 4000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 8000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 16000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#      $KH alloc -s --cpu=\$MAXPROCESSORS --cmd=\"-append \\\"console=ttyS0 ro 1 quiet EXPCMD='$VMEXEC -P \$p -R \$REPEAT -A 10000000 -t'\\\"\" \$NETID \$VMKERNEL \$VMINITRD > khout;
#      node=\$(head -1 khout); fin=\$(grep finish khout); out=\$(grep stdout khout); cat \$fin; cat \$out; $KH rmnode \$node;
#   done;
# done > \$LINUXVMOUT; $KH clean"


EBBRTRUN='
export EBBRT_NODE_ALLOCATOR_DEFAULT_CPUS=$MAXPROCESSORS;
for ((i=0; i<$RUNS; i++)); do 
   $EXEC -B -R $REPEAT -c; 
   $EXEC -B -R $REPEAT -e;
   for ((p=1; p<=$MAXPROCESSORS; p++)); do  
     $EXEC -B -P $p -R $REPEAT -A 1000 -t; 
     $EXEC -B -P $p -R $REPEAT -n;
     $EXEC -B -P $p -R $REPEAT -p;
     $EXEC -B -P $p -R $REPEAT -A 100 -s;
     $EXEC -B -m -- hoardthreadtest $p;
   done;
done > $EBBRTOUT'

# EBBRTRUN='
# export EBBRT_NODE_ALLOCATOR_DEFAULT_CPUS=$MAXPROCESSORS;
# for ((i=0; i<$RUNS; i++)); do 
#    for ((p=1; p<=$MAXPROCESSORS; p++)); do  
#      $EXEC -B -P $p -R $REPEAT -A 1000 -t; 
#      $EXEC -B -P $p -R $REPEAT -A 2000 -t; 
#      $EXEC -B -P $p -R $REPEAT -A 4000 -t; 
#      $EXEC -B -P $p -R $REPEAT -A 8000 -t; 
#      $EXEC -B -P $p -R $REPEAT -A 16000 -t; 
#      $EXEC -B -P $p -R $REPEAT -A 10000000 -t; 
#    done;
# done > $EBBRTOUT'


function acquireExpLock()
{
   screen -S $SESSION -d -m  minicom
   # give minicom time to fail
   sleep 1
   screen -ls $SESSION | grep "$SESSION"
}

function releaseExpLock()
{
  screen -X -S $SESSION quit
}

function setExp()
{
    if [[ -a $DONEXPPTR ]]; then
	! rm -f $DONEXPPTR && echo "ERROR: setExp " && exit -1
    fi
    ! ln -s $DONEXPDIR $DONEXPPTR && echo "ERROR: setExp ln" && exit -1
}

function mkDonDir()
{
  [[ -a $DONEXPDIR ]] && ! rm -rf $DONEXPDIR && echo "ERROR rm -rf $DONEXPDIR" && exit -1
  ! mkdir $DONEXPDIR && echo "ERROR: mkdir $DONEXPDIR" && exit -1
}

function mkExpBoot()
{
    cat > $BOOTFILE  <<EOF
#!/bin/bash

MYDIR=\$1
KHDIR=\$MYDIR/khpy

#copy khpy into /opt/khpy
mkdir -p /opt/
cp -r \$KHDIR /opt

# start up kh
\$MYDIR/scripts/kh-init
EOF
  chmod +x $BOOTFILE
}

function mkExpStart()
{
    cat > $STARTFILE <<EOF
#!/bin/bash

MYDIR=\$1
RUNDIR=\$MYDIR/run
APPDIR=\$MYDIR/files
RUNS=$RUNS
REPEAT=$REPEAT
MAXPROCESSORS=$MAXPROCESSORS
EXEC=\$APPDIR/$(basename $EXEC)
KH=$KH
VMKERNEL=\$APPDIR/$VMKERNEL
VMINITRD=\$APPDIR/$VMINITRD
VMEXEC=$VMEXEC
LINUXNOUT=\$RUNDIR/$LINUXNOUT
LINUXVMOUT=\$RUNDIR/$LINUXVMOUT
EBBRTOUT=\$RUNDIR/$EBBRTOUT
export LD_LIBRARY_PATH=/home/kh/opt/lib/:\$APPDIR

$LINUXNRUN
$LINUXVMRUN
$EBBRTRUN

touch \$RUNDIR/$DONEFILE

/etc/init.d/don_experiment stop
/bin/kexec-to-don

EOF
 chmod +x $STARTFILE
}

function mkExpStop()
{
    cat > $STOPFILE <<EOF
#!/bin/bash
EOF
  chmod +x $STOPFILE
}

function mkExpLinks()
{
    ln -s -f $DONEXPDIR/../../khpy $DONEXPDIR
    ln -s -f $DONEXPDIR/../../scripts $DONEXPDIR
}

function startExp()
{
  ssh -f don "/opt/kexec-to-kh"
}

function copyFiles()
{
   deps="$(ldd $EXEC |while read line; do line=${line#*/}; echo /${line%% *}; done | grep -v 'linux-vdso.so')"
   files="$EXEC $EXTRAFILES $deps $VMKERNEL $VMINITRD"
   [[ -a $DONEXPDIR/files ]] && rm -rf $DONEXPDIR/files
   mkdir $DONEXPDIR/files
   cp -aL -t $DONEXPDIR/files $files 
}

function copyOutputs()
{
  cp $RUNDIR/*.out .
}

function expWait()
{
  while [[ ! -a $RUNDIR/$DONEFILE ]]; do 
    sleep 10
  done
}

function mkVMImg()
{
 [[ ! -a $VMIMGDIR ]] && mkdir -p $VMIMGDIR
 dir=$(tempfile -d $VMIMGDIR).dir
 cp $VMSRCKERNEL $VMKERNEL
 mkdir $dir
 gunzip -c $VMSRCINITRD | (cd $dir; sudo cpio -i)
 mkdir $dir/rootfs
 gunzip -c $dir/rootfs.cgz | (cd $dir/rootfs; sudo cpio -id)
 sudo rm $dir/rootfs.cgz

 deps="$(ldd $EXEC |while read line; do line=${line#*/}; echo /${line%% *}; done | grep -v 'linux-vdso.so')"
 files="$EXEC $deps"
 sudo cp -aL -t $dir/rootfs/root $files 

 (cd $dir/rootfs; sudo find . | sudo cpio --create --format='newc' | sudo gzip -c > ../rootfs.cgz)
 sudo rm -rf $dir/roofs 
 (cd $dir; sudo find . | sudo cpio --create --format='newc' | sudo gzip -c) > $VMINITRD
 sudo rm -rf ${dir%%.dir} $dir
}

DODON=$1

if [[ -z $EXP_SKIPMAKE ]]; then
  echo "making  $EXEC"
  make -C apps/ubench/hosted/build -j8
  mkVMImg
fi

if [[ ! -a $EXEC ]]; then
  echo "FAILED to make $EXEC"
  exit -1
fi

if [[ ! -a $VMKERNEL || ! -a $VMINITRD ]]; then
  echo "FAILED to find $VMKERNEL or $VMINITRD"
  exit -1
fi

if [[ -n $DODON ]]; then

    RUNS=$DONRUNS
    REPEAT=$DONREPEAT

if [[ -z $EXP_DRYRUN ]]; then
    if ! acquireExpLock; then
    	echo "FAILED TO GET LOCK ON DON"
      exit -1
    fi

    if [[ -n $EXP_MONITOR ]]; then 
       xterm -e "screen -r $SESSION" &
    fi
fi
    mkDonDir
    copyFiles
    mkExpBoot
    mkExpStart
    mkExpStop
    mkExpLinks
    setExp
if [[ -z $EXP_DRYRUN ]]; then
    startExp
    expWait
    releaseExpLock
    copyOutputs
fi
else
    eval $LINUXNRUN
    eval $EBBRTRUN
    eval $LINUXVMRUN
fi

if [[ -z $EXP_DRYRUN ]]; then
  if [[ -z $EXP_SKIPPLOT ]]; then
    echo "MAKING PLOTS"
    plotAll
  fi
fi
